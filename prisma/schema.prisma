datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  active                Boolean                 @default(true)
  description           String?                 @default("")
  notifications         Boolean                 @default(true)
  ads                   Boolean                 @default(false)
  accounts              Account[]
  sessions              Session[]
  calculators           Calculator[]
  broadcastNotification BroadcastNotification[]
  roles                 String[]                @default(["user"])
  recipes               Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Calculator {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String
  result        Float
  weight        Float
  height        Float
  gender        String?
  age           Int?
  activityLevel Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailyStatistics {
  id               String   @id @default(cuid())
  date             DateTime @unique
  newUsers         Int      @default(0)
  newCalculators   Int      @default(0)
  newNotifications Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model BroadcastNotification {
  id        String   @id @default(cuid())
  title     String
  message   String
  sendTo    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id           String       @id @default(cuid())
  name         String 
  description  String? 
  tags         String[]     @default([]) 
  ingredients  Ingredient[] 
  instructions String[] 
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       String  @id @default(cuid())
  name     String
  quantity String?
  recipeId String
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
